name: Build and Push DERP Docker Images

on:
  push:
    branches: [main]
  schedule:
    # Runs every Monday at midnight UTC
    - cron: '0 0 * * MON'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.tailscale.outputs.version }}
      should_release: ${{ steps.check_image.outputs.exists == 'false' || github.event_name != 'schedule' }}
    strategy:
      matrix:
        image:
          - name: derp
            dockerfile: Dockerfile
            build_arg_name: DERP_VERSION
            binary_path: /derper
          - name: derpprobe
            dockerfile: Dockerfile.derpprobe
            build_arg_name: DERPPROBE_VERSION
            binary_path: /derpprobe
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Get latest Tailscale version
        id: tailscale
        run: |
          TAILSCALE_VERSION=$(curl -s https://api.github.com/repos/tailscale/tailscale/tags | jq -r '[.[] | select(.name | endswith("-pre") | not)] | .[0].name')
          echo "Latest Tailscale version: $TAILSCALE_VERSION"
          echo "version=$TAILSCALE_VERSION" >> $GITHUB_OUTPUT

      - name: Check if image exists on GHCR
        id: check_image
        run: |
          # Try to pull manifest from GHCR
          if docker manifest inspect ghcr.io/${{ github.actor }}/${{ matrix.image.name }}:${{ steps.tailscale.outputs.version }} >/dev/null 2>&1; then
            echo "Image ghcr.io/${{ github.actor }}/${{ matrix.image.name }}:${{ steps.tailscale.outputs.version }} already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image ghcr.io/${{ github.actor }}/${{ matrix.image.name }}:${{ steps.tailscale.outputs.version }} does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        if: steps.check_image.outputs.exists == 'false' || github.event_name != 'schedule'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check_image.outputs.exists == 'false' || github.event_name != 'schedule'
        uses: docker/setup-buildx-action@v3

      - name: Build and push ${{ matrix.image.name }}
        if: steps.check_image.outputs.exists == 'false' || github.event_name != 'schedule'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.image.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: |
            tracyhatemice/${{ matrix.image.name }}:${{ steps.tailscale.outputs.version }}
            tracyhatemice/${{ matrix.image.name }}:latest
            ghcr.io/${{ github.actor }}/${{ matrix.image.name }}:${{ steps.tailscale.outputs.version }}
            ghcr.io/${{ github.actor }}/${{ matrix.image.name }}:latest
          build-args: |
            ${{ matrix.image.build_arg_name }}=${{ steps.tailscale.outputs.version }}

      - name: Extract binary from Docker image
        if: steps.check_image.outputs.exists == 'false' || github.event_name != 'schedule'
        run: |
          # Pull the amd64 image
          docker pull --platform linux/amd64 tracyhatemice/${{ matrix.image.name }}:${{ steps.tailscale.outputs.version }}
          
          # Create a container from the image
          CONTAINER_ID=$(docker create --platform linux/amd64 tracyhatemice/${{ matrix.image.name }}:${{ steps.tailscale.outputs.version }})
          
          # Extract binary name from path (e.g., /derper -> derper)
          BINARY_NAME=$(basename ${{ matrix.image.binary_path }})
          
          # Copy the binary from the container
          docker cp ${CONTAINER_ID}:${{ matrix.image.binary_path }} ./${BINARY_NAME}
          
          # Remove the container
          docker rm ${CONTAINER_ID}
          
          # Ensure binary is executable
          chmod +x ${BINARY_NAME}
          
          # Create tar.xz archive
          tar -cJf ${BINARY_NAME}_${{ steps.tailscale.outputs.version }}_linux_amd64.tar.xz ${BINARY_NAME}
          
          # Verify archive
          ls -lh ${BINARY_NAME}_${{ steps.tailscale.outputs.version }}_linux_amd64.tar.xz

      - name: Upload binary archive as artifact
        if: steps.check_image.outputs.exists == 'false' || github.event_name != 'schedule'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.image.name }}-binary-${{ steps.tailscale.outputs.version }}
          path: '*_${{ steps.tailscale.outputs.version }}_linux_amd64.tar.xz'
          retention-days: 5

      - name: Summary
        if: steps.check_image.outputs.exists == 'false' || github.event_name != 'schedule'
        run: |
          BINARY_NAME=$(basename ${{ matrix.image.binary_path }})
          echo "### Built and pushed ${{ matrix.image.name }} :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Tailscale Version:** ${{ steps.tailscale.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Hub:** tracyhatemice/${{ matrix.image.name }}:${{ steps.tailscale.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GHCR:** ghcr.io/${{ github.actor }}/${{ matrix.image.name }}:${{ steps.tailscale.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Binary Archive:** ${BINARY_NAME}_${{ steps.tailscale.outputs.version }}_linux_amd64.tar.xz" >> $GITHUB_STEP_SUMMARY

      - name: Skip message
        if: steps.check_image.outputs.exists == 'true' && github.event_name == 'schedule'
        run: |
          echo "### Skipped ${{ matrix.image.name }} :zzz:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Image for version ${{ steps.tailscale.outputs.version }} already exists" >> $GITHUB_STEP_SUMMARY

  release:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.should_release == 'true'
    steps:
      - name: Download derp binary artifact
        uses: actions/download-artifact@v4
        with:
          name: derp-binary-${{ needs.build.outputs.version }}
          path: .

      - name: Download derpprobe binary artifact
        uses: actions/download-artifact@v4
        with:
          name: derpprobe-binary-${{ needs.build.outputs.version }}
          path: .

      - name: Display downloaded files
        run: ls -lh *.tar.xz

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view ${{ needs.build.outputs.version }} --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "Release ${{ needs.build.outputs.version }} already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release ${{ needs.build.outputs.version }} does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        run: |
          gh release create ${{ needs.build.outputs.version }} \
            --repo ${{ github.repository }} \
            --title "${{ needs.build.outputs.version }}" \
            --notes "derp and derpprobe binaries for linux amd64." \
            derper_${{ needs.build.outputs.version }}_linux_amd64.tar.xz \
            derpprobe_${{ needs.build.outputs.version }}_linux_amd64.tar.xz
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload assets to existing release
        if: steps.check_release.outputs.exists == 'true'
        run: |
          gh release upload ${{ needs.build.outputs.version }} \
            --repo ${{ github.repository }} \
            --clobber \
            derper_${{ needs.build.outputs.version }}_linux_amd64.tar.xz \
            derpprobe_${{ needs.build.outputs.version }}_linux_amd64.tar.xz
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release summary
        run: |
          echo "### GitHub Release Created :package:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL:** https://github.com/${{ github.repository }}/releases/tag/${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Assets:**" >> $GITHUB_STEP_SUMMARY
          echo "- derper_${{ needs.build.outputs.version }}_linux_amd64.tar.xz" >> $GITHUB_STEP_SUMMARY
          echo "- derpprobe_${{ needs.build.outputs.version }}_linux_amd64.tar.xz" >> $GITHUB_STEP_SUMMARY
